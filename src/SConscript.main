import os

Import('env', 'GlobSources')

# Build environment configuration --------------------------------------------

# The directory of this SConscript should be searched first for any headers.
env.PrependUnique(CPPPATH=Dir('.'))

# Insert LIBRARY_PATH explicitly because some compilers
# ignore it in the system environment.
env.PrependUnique(LIBPATH=env['ENV'].get('LIBRARY_PATH', '').split(':'))

# Use Intel C++ compiler when it is available
icpc = env.WhereIs('icpc')
if icpc:
    env.Tool('intelc', topdir=icpc[:icpc.rfind('/bin')])

# Declare external libraries.
env.ParseConfig("python-config --includes")
env.ParseConfig("python-config --ldflags")
env.ParseConfig("gsl-config --cflags --libs")

fast_linkflags = ['-s']

# Platform specific intricacies.
if env['PLATFORM'] == 'darwin':
    fast_linkflags[:] = []

# configure version specific options.
if not (GetOption('clean') or env.GetOption('help')):
    SConscript('SConscript.configure')

# Compiler specific options
if icpc:
    # options for Intel C++ compiler on hpc dev-intel07
    env.PrependUnique(CCFLAGS=['-w1', '-fp-model', 'precise'])
    env.PrependUnique(LIBS=['imf'])
    fast_optimflags = ['-fast']
else:
    # g++ options
    env.PrependUnique(CCFLAGS=['-Wall'])
    fast_optimflags = ['-ffast-math']

# Configure build variants
if env['build'] == 'debug':
    env.Append(CCFLAGS='-g')
elif env['build'] == 'fast':
    env.AppendUnique(CCFLAGS=['-O3'] + fast_optimflags)
    env.AppendUnique(CPPDEFINES={'NDEBUG' : None})
    env.AppendUnique(LINKFLAGS=fast_linkflags)

if env['profile']:
    env.AppendUnique(CCFLAGS='-pg')
    env.AppendUnique(LINKFLAGS='-pg')


# Define lists for storing library source and include files.
def isLibSource(f):
    ft = os.path.basename(str(f))
    rv = ft[:1].isupper() and not ft.startswith('Test') and ft != 'Version.cpp'
    return rv

env['binaries'] = []
env['lib_sources'] = filter(isLibSource, GlobSources('*.cpp'))
# This SConscript updates Version.cpp and adds it to lib_sources
SConscript('SConscript.version')
env['lib_objects'] = map(env.Object, env['lib_sources'])

# Top Level Targets ----------------------------------------------------------

# mpbcliga -- application
mpbcliga = env.Program('mpbcliga',
        ['mpbcliga.cpp'] + env['lib_objects'])
Alias('mpbcliga', mpbcliga)
env['binaries'] += mpbcliga
env['mpbcliga'] = mpbcliga

# mpbccost -- application
mpbccost = env.Program('mpbccost',
        ['mpbccost.cpp'] + env['lib_objects'])
Alias('mpbccost', mpbccost)
env['binaries'] += mpbccost

# This SConscript defines all test targets
SConscript('SConscript.tests')

# Default target - compile all binaries
env.Default(env['binaries'])

# Installation targets. ------------------------------------------------------

# install-bin
def get_target_path(f):
    from mpbcligabuildutils import gitinfo
    fb, fe = os.path.splitext(os.path.basename(str(f)))
    fb = fb.replace('mpbcliga', 'mpbcliga-' + gitinfo()['version'])
    if env['build'] == 'debug':
        fb += '-debug'
    tgt = os.path.join(env['bindir'], fb + fe)
    return tgt
bin_targets = map(get_target_path, env['binaries'])

Alias('install-bin', InstallAs(bin_targets, env['binaries']))

# install
Alias('install', ['install-bin'])

# vim: ft=python
